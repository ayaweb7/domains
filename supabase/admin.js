// admin.js
// admin.js - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
class AdminPanel {
    constructor() {
        this.init();
    }

    async init() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
            window.location.href = 'index.html';
            return;
        }

        console.log('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session.user.email);
        this.initializeAdmin();
        this.setupEventListeners();
    }

    initializeAdmin() {
        this.initializeShopsTable();
        this.initializeCitiesTable();
    }

    // –¢–ê–ë–õ–ò–¶–ê –ú–ê–ì–ê–ó–ò–ù–û–í
    initializeShopsTable() {
        this.shopsTable = new Tabulator("#shops-table", {
            layout: "fitColumns",
            pagination: "local",
            paginationSize: 10,
            paginationSizeSelector: [5, 10, 20, 50],
            columns: [
                { 
                    title: "ID", 
                    field: "id", 
                    width: 80,
                    sorter: "number"
                },
                { 
                    title: "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", 
                    field: "shop", 
                    editor: "input",
                    headerFilter: "input",
                    validator: "required"
                },
                { 
                    title: "–ì–æ—Ä–æ–¥", 
                    field: "town", 
                    editor: "input",
                    headerFilter: "input"
                },
                { 
                    title: "–£–ª–∏—Ü–∞", 
                    field: "street", 
                    editor: "input" 
                },
                { 
                    title: "–î–æ–º", 
                    field: "house", 
                    editor: "input",
                    width: 100
                },
                { 
                    title: "–¢–µ–ª–µ—Ñ–æ–Ω", 
                    field: "phone", 
                    editor: "input" 
                },
                { 
                    title: "–î–µ–π—Å—Ç–≤–∏—è", 
                    formatter: this.actionsFormatter, 
                    cellClick: (e, cell) => {
                        const data = cell.getRow().getData();
                        if (e.target.classList.contains('edit-btn')) {
                            this.editShop(data);
                        } else if (e.target.classList.contains('delete-btn')) {
                            this.deleteShop(data.id);
                        }
                    },
                    width: 120,
                    headerSort: false
                }
            ],
        });

        this.loadShopsData();
    }

    // –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ú–ê–ì–ê–ó–ò–ù–û–í
    async loadShopsData() {
        try {
            const { data, error } = await supabase
                .from('stores')
                .select('*')
                .order('id', { ascending: true });

            if (error) throw error;
            
            this.shopsTable.setData(data || []);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤:', data?.length || 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤', 'error');
        }
    }

    // –§–û–†–ú–ê–¢–¢–ï–† –ö–ù–û–ü–û–ö –î–ï–ô–°–¢–í–ò–ô
    actionsFormatter(cell) {
        return `
            <button class="edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
            <button class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        `;
    }

    // –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê
    editShop(shopData) {
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:', shopData);
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä Tabulator
        this.showNotification(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: ${shopData.shop}`, 'info');
    }

    // –£–î–ê–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê
    async deleteShop(shopId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω?')) return;

        try {
            const { error } = await supabase
                .from('stores')
                .delete()
                .eq('id', shopId);

            if (error) throw error;

            this.showNotification('–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
            this.loadShopsData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞', 'error');
        }
    }

    // –¢–ê–ë–õ–ò–¶–ê –ì–û–†–û–î–û–í (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–∞–≥–∞–∑–∏–Ω–∞–º)
    initializeCitiesTable() {
        this.citiesTable = new Tabulator("#cities-table", {
            layout: "fitColumns",
            pagination: "local",
            paginationSize: 10,
            columns: [
                { title: "ID", field: "id", width: 80 },
                { title: "–ì–æ—Ä–æ–¥ (RU)", field: "town_ru", editor: "input" },
                { title: "–ì–æ—Ä–æ–¥ (EN)", field: "town_en", editor: "input" },
                { title: "–ö–æ–¥", field: "code", editor: "input", width: 100 },
                { 
                    title: "–î–µ–π—Å—Ç–≤–∏—è", 
                    formatter: this.actionsFormatter, 
                    cellClick: (e, cell) => {
                        const data = cell.getRow().getData();
                        if (e.target.classList.contains('delete-btn')) {
                            this.deleteCity(data.id);
                        }
                    },
                    width: 80
                }
            ],
        });

        this.loadCitiesData();
    }

    async loadCitiesData() {
        try {
            const { data, error } = await supabase
                .from('locality')
                .select('*')
                .order('id', { ascending: true });

            if (error) throw error;
            
            this.citiesTable.setData(data || []);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤', 'error');
        }
    }

    async deleteCity(cityId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥?')) return;

        try {
            const { error } = await supabase
                .from('locality')
                .delete()
                .eq('id', cityId);

            if (error) throw error;

            this.showNotification('–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
            this.loadCitiesData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞', 'error');
        }
    }

    // –ù–ê–°–¢–†–û–ô–ö–ê –°–û–ë–´–¢–ò–ô
    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
        document.getElementById('shops-tab').addEventListener('click', () => this.switchTab('shops'));
        document.getElementById('cities-tab').addEventListener('click', () => this.switchTab('cities'));
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('back-to-app').addEventListener('click', () => {
            window.location.href = 'app.html';
        });

        document.getElementById('logout-btn').addEventListener('click', () => {
            window.authManager.signOut();
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('add-shop').addEventListener('click', () => this.addNewShop());
        document.getElementById('add-city').addEventListener('click', () => this.addNewCity());
    }

    // –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö
    switchTab(tabName) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(`${tabName}-section`).classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
    }

    // –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ú–ê–ì–ê–ó–ò–ù–ê
    addNewShop() {
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.shopsTable.addRow({}, true)
            .then(row => {
                row.getCells().forEach(cell => {
                    if (cell.getColumn().getDefinition().field !== 'id') {
                        cell.edit();
                    }
                });
            });
    }

    // –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ì–û–†–û–î–ê
    addNewCity() {
        this.citiesTable.addRow({}, true)
            .then(row => {
                row.getCells().forEach(cell => {
                    if (cell.getColumn().getDefinition().field !== 'id') {
                        cell.edit();
                    }
                });
            });
    }

    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    showNotification(message, type = 'info') {
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º alert
        alert(`[${type.toUpperCase()}] ${message}`);
    }
}

// –ó–ê–ü–£–°–ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
document.addEventListener('DOMContentLoaded', () => {
    window.adminPanel = new AdminPanel();
});